generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  storageUsed   Int      @default(0)
  storageLimit  Int      @default(10485760)
  isAdmin       Boolean  @default(false)
  File          File[]
  folders       Folder[]
  sharedFiles   Share[]  @relation("SharedBy")
  receivedFiles Share[]  @relation("SharedTo")
  profile       UserProfile?
  accounts      Account[]
  sessions      Session[]
  fileShares    FileShare[]
}

model Share {
  id         String    @id @default(cuid())
  fileId     String
  sharedById String
  sharedToId String?
  shareToken String    @unique
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  updatedAt  DateTime  @updatedAt
  file       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy   User      @relation("SharedBy", fields: [sharedById], references: [id], onDelete: Cascade)
  sharedTo   User?     @relation("SharedTo", fields: [sharedToId], references: [id])
}

model FileShare {
  id            String          @id @default(cuid())
  shareCode     String          @unique
  extractCode   String
  expiresAt     DateTime?       // 过期时间，null表示永不过期
  accessLimit   Int?            // 访问次数限制，null表示不限制
  accessCount   Int             @default(0) // 已访问次数
  autoFillCode  Boolean         @default(false) // 是否自动填充提取码
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String          // 分享者ID
  files         FileShareFile[] // 关联的文件
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 文件与分享的多对多关联表
model FileShareFile {
  id         String    @id @default(cuid())
  shareId    String
  fileId     String
  createdAt  DateTime  @default(now())
  share      FileShare @relation(fields: [shareId], references: [id], onDelete: Cascade)
  file       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([shareId])
  @@index([fileId])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  parentId  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
  owner     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id         String    @id
  name       String
  filename   String
  path       String
  type       String?
  size       Int?
  data       Bytes?
  isFolder   Boolean   @default(false)
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  parentId   String?
  uploaderId String
  tags       String[]
  url        String?
  File       File?     @relation("FileToFile", fields: [parentId], references: [id])
  other_File File[]    @relation("FileToFile")
  User       User      @relation(fields: [uploaderId], references: [id])
  shares     Share[]
  fileShares  FileShareFile[] // 添加文件分享关联

  @@index([parentId])
  @@index([uploaderId])
}

model MaintenanceLog {
  id        String   @id
  type      String
  details   Json
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([type])
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?
  bio         String?
  location    String?
  website     String?
  company     String?
  avatarUrl   String?
  theme       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
