generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  storageUsed       Int               @default(0)
  storageLimit      Int               @default(10485760)
  isAdmin           Boolean           @default(false)
  accounts          Account[]
  downloadHistories DownloadHistory[]
  favorites         Favorite[]
  favoriteFolders   FavoriteFolder[]
  files             File[]
  fileAccesses      FileAccess[]
  fileShares        FileShare[]
  folders           Folder[]
  sessions          Session[]
  sharedFiles       Share[]           @relation("SharedBy")
  receivedFiles     Share[]           @relation("SharedTo")
  profile           UserProfile?
  customThemes      CustomTheme[]
}

model Share {
  id         String    @id @default(cuid())
  fileId     String
  sharedById String
  sharedToId String?
  shareToken String    @unique
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  updatedAt  DateTime  @updatedAt
  file       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy   User      @relation("SharedBy", fields: [sharedById], references: [id], onDelete: Cascade)
  sharedTo   User?     @relation("SharedTo", fields: [sharedToId], references: [id])
}

model FileShare {
  id           String             @id @default(cuid())
  shareCode    String             @unique
  extractCode  String
  expiresAt    DateTime?
  accessLimit  Int?
  accessCount  Int                @default(0)
  autoFillCode Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  files        FileShareFile[]
  visitors     FileShareVisitor[]
}

model FileShareFile {
  id        String    @id @default(cuid())
  shareId   String
  fileId    String
  createdAt DateTime  @default(now())
  file      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  share     FileShare @relation(fields: [shareId], references: [id], onDelete: Cascade)

  @@index([shareId])
  @@index([fileId])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  parentId  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
  owner     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id                String            @id
  name              String
  filename          String
  path              String
  type              String?
  size              Int?
  data              Bytes?
  isFolder          Boolean           @default(false)
  isDeleted         Boolean           @default(false)
  deletedAt         DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  parentId          String?
  uploaderId        String
  tags              String[]
  url               String?
  storagePath       String?
  downloadHistories DownloadHistory[]
  favorites         Favorite[]
  File              File?             @relation("FileToFile", fields: [parentId], references: [id])
  other_File        File[]            @relation("FileToFile")
  User              User              @relation(fields: [uploaderId], references: [id])
  accessHistories   FileAccess[]
  fileShares        FileShareFile[]
  shares            Share[]

  @@index([parentId])
  @@index([uploaderId])
}

model MaintenanceLog {
  id        String   @id
  type      String
  details   Json
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([type])
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  location  String?
  website   String?
  company   String?
  avatarUrl String?
  theme     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 用户自定义主题
model CustomTheme {
  id        String   @default(cuid())
  userId    String
  name      String
  styles    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, userId])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FavoriteFolder {
  id          String     @id @default(cuid())
  name        String
  description String?
  userId      String
  isDefault   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  favorites   Favorite[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Favorite {
  id        String         @id @default(cuid())
  fileId    String
  folderId  String
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  file      File           @relation(fields: [fileId], references: [id], onDelete: Cascade)
  folder    FavoriteFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([fileId, folderId, userId])
  @@index([fileId])
  @@index([folderId])
  @@index([userId])
}

model DownloadHistory {
  id           String   @id @default(cuid())
  userId       String
  fileId       String
  downloadedAt DateTime @default(now())
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([fileId])
  @@index([downloadedAt])
}

model FileAccess {
  id         String   @id @default(cuid())
  userId     String
  fileId     String
  accessedAt DateTime @default(now())
  file       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([fileId])
  @@index([accessedAt])
}

model FileShareVisitor {
  id           String    @id @default(cuid())
  shareId      String
  fingerprint  String
  ipAddress    String?
  userAgent    String?
  visitCount   Int       @default(1)
  firstVisitAt DateTime  @default(now())
  lastVisitAt  DateTime  @default(now())
  share        FileShare @relation(fields: [shareId], references: [id], onDelete: Cascade)

  @@unique([shareId, fingerprint], name: "shareId_fingerprint")
  @@index([shareId])
  @@index([fingerprint])
}
