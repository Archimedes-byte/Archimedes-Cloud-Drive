generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  storageUsed   Int      @default(0)
  storageLimit  Int      @default(10485760)
  isAdmin       Boolean  @default(false)
  files         File[]
  sharedFiles   Share[]  @relation("SharedBy")
  receivedFiles Share[]  @relation("SharedTo")
  profile       UserProfile?
  accounts      Account[]
  sessions      Session[]
}

model Share {
  id         String    @id @default(cuid())
  fileId     String
  sharedById String
  sharedToId String?
  shareToken String    @unique
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  updatedAt  DateTime  @updatedAt
  file       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy   User      @relation("SharedBy", fields: [sharedById], references: [id], onDelete: Cascade)
  sharedTo   User?     @relation("SharedTo", fields: [sharedToId], references: [id])
}

model File {
  id         String    @id
  name       String        // 显示给用户的原始文件名
  filename   String        // 存储在文件系统中的唯一文件名 
  path       String        // 文件系统中的物理存储路径（仅用于服务器端）
  type       String?       // 文件MIME类型或分类
  size       Int?          // 文件大小（字节数）
  isFolder   Boolean   @default(false)
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  parentId   String?
  uploaderId String
  tags       String[]
  url        String?       // 访问文件的URL（仅用于前端展示或下载）
  parent     File?     @relation("FileToFolder", fields: [parentId], references: [id])
  children   File[]    @relation("FileToFolder")
  uploader   User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  shares     Share[]

  @@index([parentId])
  @@index([uploaderId])
  @@index([isFolder])
  @@index([isDeleted])
  @@index([type])
}

model MaintenanceLog {
  id        String   @id
  type      String
  details   Json
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([type])
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?
  bio         String?
  location    String?
  website     String?
  company     String?
  avatarUrl   String?
  theme       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
